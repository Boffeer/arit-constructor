"use strict";
function _toConsumableArray(e) {
  return (
    _arrayWithoutHoles(e) ||
    _iterableToArray(e) ||
    _unsupportedIterableToArray(e) ||
    _nonIterableSpread()
  );
}
function _nonIterableSpread() {
  throw new TypeError(
    "Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
  );
}
function _iterableToArray(e) {
  if ("undefined" != typeof Symbol && Symbol.iterator in Object(e))
    return Array.from(e);
}
function _arrayWithoutHoles(e) {
  if (Array.isArray(e)) return _arrayLikeToArray(e);
}
function _createForOfIteratorHelper(e, r) {
  var t;
  if ("undefined" == typeof Symbol || null == e[Symbol.iterator]) {
    if (
      Array.isArray(e) ||
      (t = _unsupportedIterableToArray(e)) ||
      (r && e && "number" == typeof e.length)
    ) {
      t && (e = t);
      var o = 0,
        a = function () {};
      return {
        s: a,
        n: function () {
          return o >= e.length ? { done: !0 } : { done: !1, value: e[o++] };
        },
        e: function (e) {
          throw e;
        },
        f: a,
      };
    }
    throw new TypeError(
      "Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
    );
  }
  var n,
    l = !0,
    s = !1;
  return {
    s: function () {
      t = e[Symbol.iterator]();
    },
    n: function () {
      var e = t.next();
      return (l = e.done), e;
    },
    e: function (e) {
      (s = !0), (n = e);
    },
    f: function () {
      try {
        l || null == t.return || t.return();
      } finally {
        if (s) throw n;
      }
    },
  };
}
function _unsupportedIterableToArray(e, r) {
  if (e) {
    if ("string" == typeof e) return _arrayLikeToArray(e, r);
    var t = Object.prototype.toString.call(e).slice(8, -1);
    return (
      "Object" === t && e.constructor && (t = e.constructor.name),
      "Map" === t || "Set" === t
        ? Array.from(e)
        : "Arguments" === t ||
          /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)
        ? _arrayLikeToArray(e, r)
        : void 0
    );
  }
}
function _arrayLikeToArray(e, r) {
  (null == r || r > e.length) && (r = e.length);
  for (var t = 0, o = new Array(r); t < r; t++) o[t] = e[t];
  return o;
}
function showPop(e, r) {
  e.classList.add("pop-wrap--opened"),
    r.classList.add("pop--opened"),
    document.querySelector("html").classList.add("pop-opened--html");
}
function closePop(e, r) {
  e.classList.remove("pop-wrap--opened"),
    r.classList.remove("pop--opened"),
    document.querySelector("html").classList.remove("pop-opened--html");
}
function popToggle(e, r) {
  var t = e,
    o = r;
  "hidden" == window.getComputedStyle(t).getPropertyValue("visibility")
    ? showPop(t, o)
    : closePop(t, o);
}
function popaAddClasses(e, r) {
  (null == e && null == e) ||
    (!e.classList.contains("pop-wrap") && e.classList.add("pop-wrap")),
    (null == r && null == r) ||
      (!r.classList.contains("pop") && r.classList.add("pop"));
}
function popa(e) {
  var r = document.querySelector(e.popWrap),
    t = document.querySelector(e.pop),
    o = document.querySelector(e.clickTrigger),
    a = document.querySelector(e.popCloser);
  popaAddClasses(r, t),
    r.removeAttribute("hidden"),
    o.addEventListener("click", function () {
      popToggle(r, t);
    }),
    a.addEventListener("click", function () {
      closePop(r, t);
    });
}
var firstTabHandler = document.querySelector(
    ".js-program-tabs__control--theory"
  ),
  firstTab = document.querySelector(".program-tab--theory"),
  secondTabHandler = document.querySelector(
    ".js-program-tabs__control--practice"
  ),
  secondTab = document.querySelector(".program-tab--practice"),
  activeHandlerClass = "program-tabs__control--current",
  activeTabClass = "program-tab--current";
firstTabHandler.addEventListener("click", function () {
  this.classList.add(activeHandlerClass),
    firstTab.classList.add(activeTabClass),
    secondTabHandler.classList.remove(activeHandlerClass),
    secondTab.classList.remove(activeTabClass),
    document
      .getElementById("program")
      .scrollIntoView({ behavior: "smooth", block: "start" });
}),
  secondTabHandler.addEventListener("click", function () {
    this.classList.add(activeHandlerClass),
      secondTab.classList.add(activeTabClass),
      firstTabHandler.classList.remove(activeHandlerClass),
      firstTab.classList.remove(activeTabClass),
      document
        .getElementById("program")
        .scrollIntoView({ behavior: "smooth", block: "start" });
  });
var _step,
  anchors = document.querySelectorAll('a[href*="#"]'),
  _iterator = _createForOfIteratorHelper(anchors);
try {
  var _loop = function () {
    var e = _step.value;
    e.addEventListener("click", function (r) {
      r.preventDefault();
      var t = e.getAttribute("href").substr(1);
      document
        .getElementById(t)
        .scrollIntoView({ behavior: "smooth", block: "start" });
    });
  };
  for (_iterator.s(); !(_step = _iterator.n()).done; ) _loop();
} catch (e) {
  _iterator.e(e);
} finally {
  _iterator.f();
}
// null != document.querySelector(".hero-video") &&
//# sourceMappingURL=data:application/json;charset=utf8;base64,
